# This cop insists on either having all attr_* methods defined in one call, or
# all as separate calls:
#
#     attr_reader :thing, :duck
#
#     attr_reader :thing
#     attr_reader :duck
#
# We believe the choice of which to use can vary contextually (e.g. one might
# want to group related accessors into multiple groups), so we don't feel it's
# necessary to enforce one style or the other.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleaccessorgrouping
Style/AccessorGrouping:
  Enabled: false

# This cop defaults to preferring the use of ruby keyword alias over
# Module#alias_method. It originally defaulted to preferring the latter, but
# this default later changed.
#
# Since we'd enforced the previous default, and also since we believe that
# Module#alias_method has less-surprising syntax and scoping semantics, so
# we've configured it to retain the original default.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylealias
Style/Alias:
  EnforcedStyle: prefer_alias_method

# This cop insists on the use of ruby 2.7-style arguments forwarding:
#
#    def foo(*args, &block)
#      bar(*args, &block)
#    end
#
#    def foo(...)
#      bar(...)
#    end
#
# We're not yet using 2.7, so this cop has no effect. As a recent cop it must
# be explicitly configured, so we've set it enabled.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleargumentsforwarding
Style/ArgumentsForwarding:
  Enabled: true

# This cop places restrictions on when do; end blocks should be used vs
# brace-style { } blocks.
#
# There are a number of different configuration options, the simplest of which
# is the default, line_count_based, uses { } for single-line blocks, and do;
# end otherwise.
#
# This rule was disabled when we first introduced rubocop; we're open to
# enabling it in future.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleblockdelimiters
Style/BlockDelimiters:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylecaselikeif
Style/CaseLikeIf:
  Enabled: false

# This cop attempts to mandate a specific class nesting style:
#
#     class Foo::Bar
#     end
#
#     vs
#
#     module Foo
#       class Bar
#       end
#     end
#
# Since ruby constant resolution varies depending on nesting, making changes
# to follow this rule can alter program behaviour (consequently, the
# autocorrect is marked as unsafe). We've therefore disabled the rule.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleclassandmodulechildren
Style/ClassAndModuleChildren:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylecombinableloops
Style/CombinableLoops:
  Enabled: false

# This cop prefers to assign the result of a conditional expression rather
# than assign the same variable in both branches:
#
#     # bad
#     if some_condition
#       a = 1
#     else
#       a = 2
#     end
#
#     # good
#     a =
#       if some_condition
#         1
#       else
#         2
#       end
#
# When the cop was introduced we had a mix of styles but didn't feel strongly
# enough to incur a large diff, so we've disabled it. We'd be open to changing
# this if it would reduce confusion.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleconditionalassignment
Style/ConditionalAssignment:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# In this case, it attempts to make inferences about the types of a method
# receiver based on the block arguments for a #reject! call:
#
#     thing = [[1, 2], [3, nil]]
#
#     # It assumes `thing` is a hash, and proposes replacing this with
#     # thing.compact, which produces a different result
#     thing.reject { |k, v| v.nil? }
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylecollectioncompact
Style/CollectionCompact:
  Enabled: false

# This cop insists on a top-level documentation comment for classes and
# modules. Since we don't use any automated documentation system, and
# primarily work on a single application, not libraries, we've disabled this
# rule.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styledocumentation
Style/Documentation:
  Enabled: false

# This cop insists that when using eval'd heredoc strings containing
# interpolations, a commented-out version is included with sample
# interpolations performed for illustration.
#
# We discourage the use of eval entirely and have only one example of it in
# our codebase, so we've disabled this rule.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styledocumentdynamicevaldefinition
Style/DocumentDynamicEvalDefinition:
  Enabled: false

# This prevents the use of case statements without a condition.
#
#     # bad
#     case
#     when some_condition
#       1
#     else
#       2
#     end
#
#     # good
#     if some_condition
#       1
#     else
#       2
#     end
#
# When this cop was introduced we had a handful of violations that seemed
# reasonable, so it was disabled; we're open to changing it if the difference
# causes confusion.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleemptycasecondition
Style/EmptyCaseCondition:
  Enabled: false

# This cop defaults to preferring single-line empty methods over multiline
# ones. When it was introduced our codebase overwhelmingly contained the
# latter, so we've enforced that style:
#
#     # bad
#     def thing; end
#
#     # good
#     def thing
#     end
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleemptymethod
Style/EmptyMethod:
  EnforcedStyle: expanded

# This cop relates to the new "end-less" syntax for method definitions in ruby
# 3.0:
#
#     def my_method() = x
#
# The default is to permit it only for single-line methods. We don't believe
# the new syntax adds anything so have chosen to disable it completely. The
# rule won't take effect until we're on ruby 3.0.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleendlessmethod
Style/EndlessMethod:
  Enabled: true
  EnforcedStyle: disallow

# This cop tries to minimise the arguments passed to File.expand_path when
# traversing directories by use of __dir__. When this cop was introduced we
# didn't feel it lended sufficient clarity to be worth enabling, but would be
# open to doing so if the differences cause confusion.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleexpandpatharguments
Style/ExpandPathArguments:
  Enabled: false

# This cop attempts to enforce style on strings used as format patterns in
# `Kernel.sprintf`-style string interpolations:
#
#     # bad
#     format('%<greeting>s', greeting: 'Hello')
#     format('%s', 'Hello')
#
#     # good
#     format('%{greeting}', greeting: 'Hello')
#
# Since it's unable to be certain whether a string containing a % character is
# actually being used as a format string, it's prone to false positives (e.g.
# SQL strings with LIKE clauses, time format strings and so on), so we've
# disabled it.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleformatstringtoken
Style/FormatStringToken:
  Enabled: false

# This cop prefers the use of $stdout and similar I/O globals over the
# constant versions (e.g. STDOUT).
#
# We didn't feel that there was any confusion caused by these two options so
# disabled the rule to avoid a code diff; we'd be open to enabling it if it's
# considered useful.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleglobalstdstream
Style/GlobalStdStream:
  Enabled: false

# This cop prefers postfix conditionals in a wide range of situations
#
#     # bad
#     def my_method
#       if condition
#         do_something
#       end
#     end
#
#     # good
#     def my_method
#       do_something if condition
#     end
#
# In a large number of cases it does so at the cost of readability due to
# extreme line length, so we've disabled it.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleguardclause
Style/GuardClause:
  Enabled: false

# This cop defaults to insisting on braces around hashes at the end of an
# array:
#
#     # bad
#     [:one, two: :three]
#
#     # good
#     [:one, { two: :three }]
#
# This is a newer cop, and when introduced it produced a sufficient diff that
# we didn't feel it was worth enabling. We'd be open to enabling it if it
# would help avoid confusion.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehashaslastarrayitem
Style/HashAsLastArrayItem:
  Enabled: false

# This cop prefers #to_h over the Hash conversion method.
#
#     # bad
#     Hash[1, 2]
#     => { 1 => 2 }
#
#     # good
#     [1, 2].to_h
#     => { 1 => 2 }
#
# We think this is worthwhile as the method syntax is less surprising than
# what looks like element access. As a newer cop this must be explicitly
# configured.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehashconversion
Style/HashConversion:
  Enabled: true

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehasheachmethods
Style/HashEachMethods:
  Enabled: false

# This cop's docs say it should only be enabled on ruby 3.0 or higher, so
# we've disabled it until we upgrade.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehashexcept
Style/HashExcept:
  Enabled: false

# This cop attempts to transform case statements into hash lookups. This is a
# recent cop and we didn't feel it was sufficiently valuable to be worth the
# code churn.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehashlikecase
Style/HashLikeCase:
  Enabled: false

# In ruby 3.1, this cop allows the enforcement of hash shorthand syntax, i.e.
# the JavaScript-inspired { foo:, bar: } syntax which works if local variables
# foo and bar exist.
#
# The default config is to enforce this wherever possible. While possibly
# justifiable, it produces ~13k violations in our current codebase, so we'll
# consider enabling it later.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehashsyntax
Style/HashSyntax:
  EnforcedShorthandSyntax: either

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehashtransformkeys
Style/HashTransformKeys:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylehashtransformvalues
Style/HashTransformValues:
  Enabled: false

# This cop attempts to convert if clauses inside else clauses into elsif.
#
#     # bad
#     if a
#       if b
#         "a + b"
#       else
#         "a + !b"
#       end
#     else
#       if b
#         "!a + b"
#       else
#         "!a + !b"
#       end
#     end
#
#     # good
#     if a
#       if b
#         "a + b"
#       else
#         "a + !b"
#       end
#     elsif b
#       "!a + b"
#     else
#       "!a + !b"
#     end
#
# We felt that sometimes this lends clarity, while other times (as in the
# example above, where the symmetry of the inner conditional is lost), it
# obscures. We've therefore disabled it.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleifinsideelse
Style/IfInsideElse:
  Enabled: false

# This cop prefers postfix conditionals (do_thing if condition) if they fit on
# one line. Since we haven't configured Layout/LineLength this produces very
# long lines, so we've disabled it.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleifunlessmodifier
Style/IfUnlessModifier:
  Enabled: false

# This cop checks for conditional expressions returning boolean values, where
# the condition could be returned instead.
#
#     if some_condition?
#       true
#     else
#       false
#     end
#
# Returning the result of some_condition? may not be exactly the same
# behaviour, since not all predicate methods return boolean literals. While
# the above code is perhaps a clunky way to coerce a truthy/falsey value to a
# boolean, we prefer not to enforce rules that promote changes in code
# behaviour, so have disabled this cop.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleifwithbooleanliteralbranches
Style/IfWithBooleanLiteralBranches:
  Enabled: false

# This cop prefers the lambda do |x|; end syntax for multiline lambdas, over
# the stabby lambda ->(x) do; end syntax.
#
# We can't think of a reason why this is preferable so have disabled the cop.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylelambda
Style/Lambda:
  Enabled: false

# We run our main application in puma, a threaded webserver. As such we need
# our code to be threadsafe, and constants in ruby are a potential source of
# global mutable state. (While reassigning a constant name in ruby produces a
# warning, nothing prevents you modifying an array assigned to a constant.)
#
# This cop insists that all constants must be frozen to prevent modification.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylelambda
Style/MutableConstant:
  Enabled: true
  EnforcedStyle: strict

# This cop is a recent addition that objects to the use of negated conditions
# in if/else clauses. None of the transformations it suggested seemed clearer,
# so we've disabled the cop.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylenegatedifelsecondition
Style/NegatedIfElseCondition:
  Enabled: false

# This cop objects to using an explicit nil expression in otherwise-empty
# lambdas, preferring completely empty blocks:
#
#     -> { nil }
#     # vs
#     -> { }
#
# We don't understand the motivation for this cop so have disabled it.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylenillambda
Style/NilLambda:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylenumericpredicate
Style/NumericPredicate:
  Enabled: false

# This cop enforces particular delimiters for percent-literals, which are
# syntactic niceties for declaring things like string arrays, symbol arrays,
# regexes and so on.
#
# Rubocop changed the defaults in version 0.48; our configuration matches the
# original defaults because we didn't think it was worth incurring a large
# code diff to match the new defaults.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylepercentliteraldelimiters
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    default: ()
    '%i': '()'
    '%I': '()'
    '%r': '{}'
    '%w': '()'
    '%W': '()'

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylepreferredhashmethods
Style/PreferredHashMethods:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleredundantargument
Style/RedundantArgument:
  Enabled: false

# This rejects the use of %q() and %Q() string delimiters unless the string
# contains both ' and " characters that would need escaping in a regular
# string.
#
# We disabled this because it seemed to make some things less readable, and
# didn't seem to address any confusion.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleredundantpercentq
Style/RedundantPercentQ:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleredundantselfassignment
Style/RedundantSelfAssignment:
  Enabled: false

# This cop tries to avoid redundant begin/end blocks where they can be
# omitted:
#
#      # bad
#      def do_stuff
#        begin
#          Stuff.new.do
#        rescue StandardError
#          puts 'oops'
#        end
#      end
#
#      # good
#      def do_stuff
#        Stuff.new.do
#      rescue StandardError
#        puts 'oops'
#      end
#
# This seems reasonable, however its autocorrect causes an infinite loop
# fighting with a number of other cops, so we've left it disabled.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleredundantbegin
Style/RedundantBegin:
  Enabled: false

# This cop checks for `return` statements that can be omitted:
#
#     # bad
#     def do_thing
#       Thing.new.do
#     rescue StandardError
#       return
#     end
#
#     # good
#     def do_thing
#       Thing.new.do
#     rescue StandardError
#     end
#
# This is fine, however in the above example this would then put us in
# violation of the Lint/SuppressedException cop, which dislikes the empty
# rescue block. We could fix that with a `nil` expression in place of the
# `return` but we feel that when cops start fighting each other, no good will
# come of it, so have disabled this one on the basis that Lint cops should
# take precedence over Style ones.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleredundantreturn
Style/RedundantReturn:
  Enabled: false

# This cop prefers use of the safe navigation operator &. over explicit nil
# checks. Its autocorrection is marked as unsafe so since this is quite likely
# to encourage the introduction of subtle bugs, we've left it disabled.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylesafenavigation
Style/SafeNavigation:
  Enabled: false

# This cop has opinions on whether to use `fail` or `raise` to raise
# exceptions. The original default was to use `fail` for the first raise
# of an exception, and `raise` if an exception is rescued and then re-raised.
#
# This default later changed to "always use `raise`", so we set our config to
# retain our existing style.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylesignalexception
Style/SignalException:
  EnforcedStyle: semantic

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylesingleargumentdig
Style/SingleArgumentDig:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleslicingwithrange
Style/SlicingWithRange:
  Enabled: false

# This cop attempts to combine inner conditionals into a single statement:
#
#     # bad
#     if a
#       if b
#         do_thing
#       end
#     end
#
#     # good
#     if a && b
#       do_thing
#     end
#
# This is reasonable in isolation but there were a number of cases in our
# codebase where readability was significantly harmed by the suggested
# transformation, so we've disabled it.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylesolenestedconditional
Style/SoleNestedConditional:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylestringchars
Style/StringChars:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylestringconcatenation
Style/StringConcatenation:
  Enabled: false

# This cop defaults to preferring single quotes for string literals, unless
# interpolation is performed:
#
#     # bad
#     "hello"
#
#     # good
#     'hello'
#     "hello, #{current_user.first_name}"
#
# This cop wasn't initially enforced when we installed rubocop, and would
# produce a very large diff now. We'd be open to enabling it.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylestringliterals
Style/StringLiterals:
  Enabled: false

# This cop prefers shorthand variable swapping over the introduction of an
# intermediate variable:
#
#     # bad
#     tmp = x
#     x = y
#     y = tmp
#
#     # good
#     x, y = y, x
#
# It's a new cop that must be explicitly configured. Since we don't have any
# violations, we've enabled it. The autocorrect is marked as unsafe (it can't
# tell if the temporary variable is used elsewhere), so if this causes
# problems we should disable the rule entirely.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleswapvalues
Style/SwapValues:
  Enabled: true

# This cop prefers symbol-array literals:
#
#     # bad
#     [:some, :symbols, :in, :an_array]
#
#     # good
#     %i( some symbols with the shiny syntax )
#
# This wasn't enabled when the cop was introduced due to a very large number
# of violations. We'd be open to enabling it if desired.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylesymbolarray
Style/SymbolArray:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylesymbolproc
Style/SymbolProc:
  Enabled: false

# This cop prefers %w( word arrays like this ) over ['word', 'arrays', 'like',
# 'this'].
#
# It was disabled in the past as it was felt the latter was sometimes more
# readable; we'd be open to changing the setting if it's felt this causes
# confusion.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylewordarray
Style/WordArray:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#styleyodacondition
Style/YodaCondition:
  Enabled: false

# This cop's docs mark it as unsafe, which typically means a cop is prone to
# false positives, or following its advice will cause bugs, or both.
#
# https://docs.rubocop.org/rubocop/cops_style.html#stylezerolengthpredicate
Style/ZeroLengthPredicate:
  Enabled: false
